#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.11
# from Racc grammer file "".
#

require 'racc/parser.rb'
module Intp
  class Parser < Racc::Parser

module_eval(<<'...end parser.y/module_eval...', 'parser.y', 46)

  def parse(file, file_name)
    @file_name = file_name
    @q = Scanner.new.scan(file)
    @yydebug = true
    do_parse
  end

  def next_token
    @q.shift
  end

  def on_error(t, v, values)
    if v
      line = v[0]
      v = v[1]
    else
      line = 'last'
    end
    raise Racc::ParseError, "#{@file_name}:#{line}: syntax error on #{v.inspect}"
  end
...end parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    12,     4,     6,     9,    17,    18,     3,    10,    13,    14,
    15,    16,    11,    19,    20,    21,    22,    23,    24,    25 ]

racc_action_check = [
     9,     2,     2,     2,    16,    16,     1,     3,     9,    12,
    13,    14,     5,    17,    18,    19,    20,    21,    22,    23 ]

racc_action_pointer = [
   nil,     6,    -1,     7,   nil,    10,   nil,   nil,   nil,    -5,
   nil,   nil,     3,     5,     4,   nil,    -4,     4,     4,     5,
     5,     6,     6,     7,   nil,   nil ]

racc_action_default = [
    -2,   -11,    -1,   -11,    -3,   -11,    -5,    -6,    -7,   -11,
    26,    -4,   -11,   -11,   -11,   -10,   -11,   -11,   -11,   -11,
   -11,   -11,   -11,   -11,    -9,    -8 ]

racc_goto_table = [
     1,     2,     5,     7,     8 ]

racc_goto_check = [
     1,     2,     3,     4,     5 ]

racc_goto_pointer = [
   nil,     0,     1,     0,     1,     2 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 15, :_reduce_1,
  0, 16, :_reduce_2,
  2, 16, :_reduce_none,
  3, 16, :_reduce_4,
  2, 16, :_reduce_5,
  1, 17, :_reduce_none,
  1, 17, :_reduce_none,
  9, 19, :_reduce_8,
  8, 19, :_reduce_9,
  3, 18, :_reduce_10 ]

racc_reduce_n = 11

racc_shift_n = 26

racc_token_table = {
  false => 0,
  :error => 1,
  :EOL => 2,
  :EOF => 3,
  :A => 4,
  :ITEM_NAME => 5,
  :LENGTH => 6,
  :DATA_TYPE => 7,
  :DECIMAL_POSITIONS => 8,
  :COLHDG => 9,
  "(" => 10,
  :STRING => 11,
  ")" => 12,
  :TYPE_OF_NAME_OR_SPEC => 13 }

racc_nt_base = 14

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "EOL",
  "EOF",
  "A",
  "ITEM_NAME",
  "LENGTH",
  "DATA_TYPE",
  "DECIMAL_POSITIONS",
  "COLHDG",
  "\"(\"",
  "STRING",
  "\")\"",
  "TYPE_OF_NAME_OR_SPEC",
  "$start",
  "dds",
  "stmt_list",
  "stmt",
  "record_format",
  "field" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.y', 8)
  def _reduce_1(val, _values, result)
                      result = RootNode.new(val[0])
                
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 13)
  def _reduce_2(val, _values, result)
                      result = []
                
    result
  end
.,.,

# reduce 3 omitted

module_eval(<<'.,.,', 'parser.y', 18)
  def _reduce_4(val, _values, result)
                      result.push(val[1])
                
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 22)
  def _reduce_5(val, _values, result)
                    
    result
  end
.,.,

# reduce 6 omitted

# reduce 7 omitted

module_eval(<<'.,.,', 'parser.y', 29)
  def _reduce_8(val, _values, result)
                      result = FieldNode.new(@file_name, val[1][0], val[1][1], val[2][1], val[3][1], val[4][1], val[6][1])
                
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 34)
  def _reduce_9(val, _values, result)
                      result = FieldNode.new(@file_name, val[1][0], val[1][1], val[2][1], val[3][1], nil, val[6][1])
                
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 39)
  def _reduce_10(val, _values, result)
                      result = RecordFormatNode.new(@file_name, val[1][0], val[1][1], val[2][1])
                
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Intp

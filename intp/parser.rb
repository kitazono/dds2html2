#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.11
# from Racc grammer file "".
#

require 'racc/parser.rb'
class Parser < Racc::Parser

module_eval(<<'...end parser.y/module_eval...', 'parser.y', 132)

  def parse(file, file_name)
    @file_name = file_name
    @q = Scanner.new.scan(file)
    @yydebug = true
    do_parse
  end

  def next_token
    @q.shift
  end

  def on_error(t, v, values)
    if v
      line = v[0]
      v = v[1]
    else
      line = 'last'
    end
    raise Racc::ParseError, "#{@file_name}:#{line}: syntax error on #{v.inspect}"
  end
...end parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    22,    19,    39,     4,    18,    41,    32,    20,    21,    33,
    30,    31,    34,    24,    25,    12,    35,    27,    28,    11,
     9,     8,    29,     8,    15,    36,    37,     6,    43,    44,
    45,    46,     8,    41,     8,     8,     8,     8 ]

racc_action_check = [
    12,    12,    26,     1,    12,    26,    18,    12,    12,    18,
    18,    18,    20,    13,    13,     8,    20,    15,    15,     6,
     4,    16,    17,     3,    10,    21,    24,     2,    30,    31,
    32,    33,    38,    39,    42,    47,    49,    50 ]

racc_action_pointer = [
   nil,     3,    25,    15,    20,   nil,    16,   nil,     6,   nil,
    21,   nil,    -7,    11,   nil,    12,    13,    12,    -2,   nil,
     5,    14,   nil,   nil,    23,   nil,    -2,   nil,   nil,   nil,
    17,    18,    19,    20,   nil,   nil,   nil,   nil,    24,    26,
   nil,   nil,    26,   nil,   nil,   nil,   nil,    27,   nil,    28,
    29 ]

racc_action_default = [
   -17,   -32,   -32,    -2,   -32,    -4,   -32,   -18,   -19,    51,
   -13,   -17,   -32,    -1,    -5,   -10,    -3,   -32,   -21,   -27,
   -32,   -32,   -31,   -14,   -32,   -17,   -12,   -17,    -9,   -20,
   -32,   -32,   -32,   -26,   -28,   -29,   -30,   -17,   -16,   -12,
   -17,   -11,    -8,   -22,   -23,   -24,   -25,   -15,   -17,    -7,
    -6 ]

racc_goto_table = [
     3,    40,     1,    10,    13,     5,    14,    26,     2,    23,
    17,    16,   nil,   nil,    48,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    38,   nil,    42,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    47,   nil,   nil,
    49,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    50 ]

racc_goto_check = [
     6,     9,     1,     4,     5,     3,     7,     8,     2,    10,
    12,     6,   nil,   nil,     9,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     6,   nil,     6,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,     6,   nil,   nil,
     6,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     6 ]

racc_goto_pointer = [
   nil,     2,     8,     3,    -2,    -6,     0,    -4,    -8,   -25,
    -4,   nil,    -2 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,     7,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  4, 17, :_reduce_1,
  1, 18, :_reduce_none,
  3, 19, :_reduce_3,
  0, 20, :_reduce_4,
  2, 20, :_reduce_5,
  5, 23, :_reduce_6,
  4, 23, :_reduce_7,
  3, 23, :_reduce_8,
  1, 24, :_reduce_none,
  0, 24, :_reduce_10,
  1, 25, :_reduce_none,
  0, 25, :_reduce_12,
  0, 21, :_reduce_13,
  2, 21, :_reduce_14,
  3, 26, :_reduce_15,
  2, 26, :_reduce_16,
  0, 22, :_reduce_17,
  2, 22, :_reduce_18,
  1, 27, :_reduce_19,
  4, 27, :_reduce_20,
  1, 28, :_reduce_none,
  3, 28, :_reduce_22,
  3, 28, :_reduce_23,
  3, 28, :_reduce_24,
  3, 28, :_reduce_25,
  2, 28, :_reduce_26,
  1, 28, :_reduce_none,
  2, 28, :_reduce_none,
  2, 28, :_reduce_none,
  2, 28, :_reduce_none,
  1, 28, :_reduce_none ]

racc_reduce_n = 32

racc_shift_n = 51

racc_token_table = {
  false => 0,
  :error => 1,
  :TYPE => 2,
  :NAME => 3,
  :FILE_TYPE => 4,
  :REFERENCE => 5,
  :LENGTH => 6,
  :NUMBER => 7,
  :IDENT => 8,
  "(" => 9,
  ")" => 10,
  :STRING => 11,
  "+" => 12,
  "-" => 13,
  :EQ => 14,
  :NE => 15 }

racc_nt_base = 16

racc_use_result_var = false

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "TYPE",
  "NAME",
  "FILE_TYPE",
  "REFERENCE",
  "LENGTH",
  "NUMBER",
  "IDENT",
  "\"(\"",
  "\")\"",
  "STRING",
  "\"+\"",
  "\"-\"",
  "EQ",
  "NE",
  "$start",
  "dds",
  "file_level",
  "record_level",
  "field_level",
  "key_field_level",
  "functions",
  "data_field",
  "length",
  "decimal_positions",
  "key_field",
  "function",
  "primary" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.y', 11)
  def _reduce_1(val, _values)
                              RootNode.new(val[0], val[1], val[2], val[3])
                        
  end
.,.,

# reduce 2 omitted

module_eval(<<'.,.,', 'parser.y', 18)
  def _reduce_3(val, _values)
                              RecordNode.new(@file_name, val[0][0], val[0][1], val[1][1], val[2])
                        
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 23)
  def _reduce_4(val, _values)
                              []                
                        
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 27)
  def _reduce_5(val, _values)
                              val[0].push(val[1])
                        
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 32)
  def _reduce_6(val, _values)
                              DataFieldNode.new(@file_name, val[0][0], val[0][1], val[1][1], val[2][1], val[3][1], val[4])
                        
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 36)
  def _reduce_7(val, _values)
                              DataFieldNode.new(@file_name, val[0][0], val[0][1], val[1][1], "A", val[2][1], val[3])
                        
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 40)
  def _reduce_8(val, _values)
                              DataFieldNode.new(@file_name, val[0][0], val[0][1], nil, val[1][1], nil, val[2])
                        
  end
.,.,

# reduce 9 omitted

module_eval(<<'.,.,', 'parser.y', 47)
  def _reduce_10(val, _values)
                              [nil, nil]
                        
  end
.,.,

# reduce 11 omitted

module_eval(<<'.,.,', 'parser.y', 53)
  def _reduce_12(val, _values)
                              [nil, nil]
                        
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 59)
  def _reduce_13(val, _values)
                              {}
                        
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 63)
  def _reduce_14(val, _values)
                              val[0].store(val[1].name, val[1].key_sequence)
                          val[0]
                        
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 70)
  def _reduce_15(val, _values)
                              KeyFieldNode.new(@file_name, val[0][0], val[0][1], val[1][1], val[2])
                        
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 74)
  def _reduce_16(val, _values)
                              KeyFieldNode.new(@file_name, val[0][0], val[0][1], nil, val[1])
                        
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 79)
  def _reduce_17(val, _values)
                              []
                        
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 83)
  def _reduce_18(val, _values)
                              val[0].push(val[1])
                        
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 88)
  def _reduce_19(val, _values)
                              FunctionNode.new(@file_name, val[0][0], val[0][1])
                        
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 92)
  def _reduce_20(val, _values)
                              FunctionNode.new(@file_name, val[0][0], val[0][1], val[2][1])
                        
  end
.,.,

# reduce 21 omitted

module_eval(<<'.,.,', 'parser.y', 99)
  def _reduce_22(val, _values)
                              val[0][1][1] = val[0][1][1] + val[2][1][1]
                          val[0]
                        
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 104)
  def _reduce_23(val, _values)
                              val[0][1][1] = val[0][1][1] + val[2][1][1]
                          val[0]
                        
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 109)
  def _reduce_24(val, _values)
                              val[0][1] = val[0][1] + val[1][1] + val[2][1]
                          val[0]
                        
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 114)
  def _reduce_25(val, _values)
                              val[0][1] = val[0][1] + val[1][1] + val[2][1]
                          val[0]
                        
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 119)
  def _reduce_26(val, _values)
                              val[0][1][1] = val[0][1][1] + val[1][1][1]
                          val[0]
                        
  end
.,.,

# reduce 27 omitted

# reduce 28 omitted

# reduce 29 omitted

# reduce 30 omitted

# reduce 31 omitted

def _reduce_none(val, _values)
  val[0]
end

end   # class Parser

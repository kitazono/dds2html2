#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.12
# from Racc grammer file "".
#

require 'racc/parser.rb'
class Parser < Racc::Parser

module_eval(<<'...end parser.y/module_eval...', 'parser.y', 86)

  def parse(file, file_name)
    @file_name = file_name
    @q = Scanner.new.scan(file)
    @yydebug = true
    do_parse
  end

  def next_token
    @q.shift
  end

  def on_error(t, v, values)
    if v
      line = v[0]
      v = v[1]
    else
      line = 'last'
    end
    raise Racc::ParseError, "#{@file_name}:#{line}: syntax error on #{v.inspect}"
  end
...end parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    18,    22,    17,     8,     9,    11,    12,    15,     4,    20,
     6,     8,    23,    24,    25,    26,    29,     8,     8 ]

racc_action_check = [
    12,    15,    12,     3,     4,     6,     8,    10,     1,    13,
     2,    16,    17,    18,    20,    21,    26,    27,    30 ]

racc_action_pointer = [
   nil,     8,     8,    -2,     4,   nil,     2,   nil,     0,   nil,
     4,   nil,    -5,     7,   nil,    -3,     6,     4,     5,   nil,
    11,    13,   nil,   nil,   nil,   nil,    12,    12,   nil,   nil,
    13 ]

racc_action_default = [
   -13,   -18,   -18,    -2,   -18,    -4,   -18,   -14,   -15,    31,
   -10,   -13,   -18,    -1,    -5,   -18,    -3,   -18,   -18,   -11,
   -18,   -18,    -7,   -16,   -17,   -13,    -9,   -12,   -13,    -8,
    -6 ]

racc_goto_table = [
     3,     1,     5,    10,    13,     2,    14,    21,    28,    19,
   nil,    16,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    27,   nil,   nil,    30 ]

racc_goto_check = [
     6,     1,     3,     4,     5,     2,     7,     8,     9,    10,
   nil,     6,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     6,   nil,   nil,     6 ]

racc_goto_pointer = [
   nil,     1,     5,     0,    -2,    -6,     0,    -4,    -8,   -18,
    -4,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,     7 ]

racc_reduce_table = [
  0, 0, :racc_error,
  4, 10, :_reduce_1,
  1, 11, :_reduce_none,
  3, 12, :_reduce_3,
  0, 13, :_reduce_4,
  2, 13, :_reduce_5,
  5, 16, :_reduce_6,
  1, 17, :_reduce_none,
  1, 18, :_reduce_none,
  0, 18, :_reduce_9,
  0, 14, :_reduce_10,
  2, 14, :_reduce_11,
  3, 19, :_reduce_12,
  0, 15, :_reduce_13,
  2, 15, :_reduce_14,
  1, 20, :_reduce_15,
  4, 20, :_reduce_16,
  4, 20, :_reduce_17 ]

racc_reduce_n = 18

racc_shift_n = 31

racc_token_table = {
  false => 0,
  :error => 1,
  :TYPE => 2,
  :NAME => 3,
  :NUMBER => 4,
  :IDENT => 5,
  "(" => 6,
  :STRING => 7,
  ")" => 8 }

racc_nt_base = 9

racc_use_result_var = false

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "TYPE",
  "NAME",
  "NUMBER",
  "IDENT",
  "\"(\"",
  "STRING",
  "\")\"",
  "$start",
  "dds",
  "file_level",
  "record_level",
  "field_level",
  "key_field_level",
  "functions",
  "data_field",
  "length",
  "decimal_positions",
  "key_field",
  "function" ]

Racc_debug_parser = true

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.y', 10)
  def _reduce_1(val, _values)
                              RootNode.new(val[0], val[1], val[2], val[3])
                        
  end
.,.,

# reduce 2 omitted

module_eval(<<'.,.,', 'parser.y', 17)
  def _reduce_3(val, _values)
                              RecordNode.new(@file_name, val[0][0], val[0][1], val[1][1], val[2])
                        
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 22)
  def _reduce_4(val, _values)
                              []                
                        
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 26)
  def _reduce_5(val, _values)
                              val[0].push(val[1])
                        
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 31)
  def _reduce_6(val, _values)
                              DataFieldNode.new(@file_name, val[0][0], val[0][1], val[1][1], val[2][1], val[3][1], val[4])
                        
  end
.,.,

# reduce 7 omitted

# reduce 8 omitted

module_eval(<<'.,.,', 'parser.y', 39)
  def _reduce_9(val, _values)
                              [nil, nil]
                        
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 45)
  def _reduce_10(val, _values)
                              {}
                        
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 49)
  def _reduce_11(val, _values)
                              val[0].store(val[1].name, val[1].key_sequence)
                          val[0]
                        
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 56)
  def _reduce_12(val, _values)
                              KeyFieldNode.new(@file_name, val[0][0], val[0][1], val[1][1], val[2])
                        
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 61)
  def _reduce_13(val, _values)
                              []
                        
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 65)
  def _reduce_14(val, _values)
                              val[0].push(val[1])
                        
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 70)
  def _reduce_15(val, _values)
                              FunctionNode.new(@file_name, val[0][0], val[0][1])
                        
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 74)
  def _reduce_16(val, _values)
                              FunctionNode.new(@file_name, val[0][0], val[0][1], val[2][1])
                        
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 78)
  def _reduce_17(val, _values)
                              FunctionNode.new(@file_name, val[0][0], val[0][1], val[2][1])
                        
  end
.,.,

def _reduce_none(val, _values)
  val[0]
end

end   # class Parser
